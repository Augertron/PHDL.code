// This design is a simple PCI Express card carrying a Xilinx Spartan-6 LXT part in the FG484 package.
// The PCIe interface and DDR3 memory are provided for development purposes on those interfaces.
// spartan_pcie_board.phdl
// - power_supply.phdl
// - fpga.phdl

design spartan_pcie_board {

    // Power and ground nets.
    net +12V, +3V3, +1V8, +1V5, +1V5_sense, +1V2, gnd;
    // PCIe.
    net pcie_tx0_p, pcie_tx0_n, pcie_rx0_p, pcie_rx0_n, pcie_refclk_p, pcie_refclk_n;
    net pcie_perst_n, pcie_prsnt_n;
    // Test signals.
    net test_trace_bottom, test_trace_top;

    // First let's instantiate the PCIe edge connector.
    inst pcie_conn of PCIE_EDGE_CONN_X1 {  refDes="P1";
        +12V      = <+12V>; // All power for this board.
        RSVD      = open;
        GND       = <gnd>;
        SMCLK     = open;
        SMDAT     = open;
        +3_3V     = open; // we do not use 3.3V supply from edge connector.
        TRST_N    = open;
        +3_3V_AUX = open; // we do not use 3.3V supply from edge connector.
        WAKE_N    = open;
        PETp0     = pcie_rx0_p; // motherboard tx is our rx.
        PETn0     = pcie_rx0_n;
        PRSNT2_N  = pcie_prsnt_n;
        PRSNT1_N  = pcie_prsnt_n;
        TCK       = open;
        TDI       = open;
        TDO       = open;
        TMS       = open;
        PERST_N   = pcie_perst_n;
        REFCLK+   = pcie_refclk_p;
        REFCLK-   = pcie_refclk_n;
        PERp0     = pcie_tx0_p;  // motherboard rx is our tx.
        PERn0     = pcie_tx0_n;
    }


    // this is the FPGA block.
    subInst fpga1 of fpga {
        //subPrefix = "F.";

        // Power
        +3V3 = +3V3;
        +1V8 = +1V8;
        +1V5 = +1V5;
        +1V2 = +1V2;
        gnd  = gnd;

        // x1 PCIe interface.
        pcie_perst_n  = pcie_perst_n;
        pcie_refclk_p = pcie_refclk_p;
        pcie_refclk_n = pcie_refclk_n;
        pcie_tx0_p    = pcie_tx0_p ;
        pcie_tx0_n    = pcie_tx0_n ;
        pcie_rx0_p    = pcie_rx0_p ;
        pcie_rx0_n    = pcie_rx0_n ;

        // // MCB1 DDR3 Interface
	// mcb1_c1_sys_clk_n = mcb1_c1_sys_clk_n;
	// mcb1_c1_sys_clk_p = mcb1_c1_sys_clk_p;
	// mcb1_c1_sys_rst_i = mcb1_c1_sys_rst_i;
	// mcb1_dram_a       = mcb1_dram_a;
	// mcb1_dram_ba      = mcb1_dram_ba;
	// mcb1_dram_cas_n   = mcb1_dram_cas_n;
	// mcb1_dram_ck      = mcb1_dram_ck;
	// mcb1_dram_ck_n    = mcb1_dram_ck_n;
	// mcb1_dram_cke     = mcb1_dram_cke;
	// mcb1_dram_dm      = mcb1_dram_dm;
	// mcb1_dram_dq      = mcb1_dram_dq;
	// mcb1_dram_dqs     = mcb1_dram_dqs;
	// mcb1_dram_dqs_n   = mcb1_dram_dqs_n;
	// mcb1_dram_odt     = mcb1_dram_odt;
	// mcb1_dram_ras_n   = mcb1_dram_ras_n;
	// mcb1_dram_reset_n = mcb1_dram_reset_n;
	// mcb1_dram_udm     = mcb1_dram_udm;
	// mcb1_dram_udqs    = mcb1_dram_udqs;
	// mcb1_dram_udqs_n  = mcb1_dram_udqs_n;
	// mcb1_dram_we_n    = mcb1_dram_we_n ;
	// mcb1_rzq          = mcb1_rzq;
	// mcb1_zio          = mcb1_zio;

        // // MCB3 DDR3 Interface
	// mcb3_c1_sys_clk_n = mcb3_c1_sys_clk_n;
	// mcb3_c1_sys_clk_p = mcb3_c1_sys_clk_p;
	// mcb3_c1_sys_rst_i = mcb3_c1_sys_rst_i;
	// mcb3_dram_a       = mcb3_dram_a;
	// mcb3_dram_ba      = mcb3_dram_ba;
	// mcb3_dram_cas_n   = mcb3_dram_cas_n;
	// mcb3_dram_ck      = mcb3_dram_ck;
	// mcb3_dram_ck_n    = mcb3_dram_ck_n;
	// mcb3_dram_cke     = mcb3_dram_cke;
	// mcb3_dram_dm      = mcb3_dram_dm;
	// mcb3_dram_dq      = mcb3_dram_dq;
	// mcb3_dram_dqs     = mcb3_dram_dqs;
	// mcb3_dram_dqs_n   = mcb3_dram_dqs_n;
	// mcb3_dram_odt     = mcb3_dram_odt;
	// mcb3_dram_ras_n   = mcb3_dram_ras_n;
	// mcb3_dram_reset_n = mcb3_dram_reset_n;
	// mcb3_dram_udm     = mcb3_dram_udm;
	// mcb3_dram_udqs    = mcb3_dram_udqs;
	// mcb3_dram_udqs_n  = mcb3_dram_udqs_n;
	// mcb3_dram_we_n    = mcb3_dram_we_n ;
	// mcb3_rzq          = mcb3_rzq;
	// mcb3_zio          = mcb3_zio;
       
    }


    // this is the power supply block.
    subInst supply of power_supply  {
        //subPrefix = "P.";
        +12V = +12V;
        +3V3 = +3V3;
        +1V8 = +1V8;
        +1V5 = +1V5;
        +1V2 = +1V2;
        gnd  = gnd;
    }



    // These are the four mounting holes for a standard PCIe board.
    inst mounting_hole1 of mount_hole_125 { refDes="MTG1"; pin1=open; }
    inst mounting_hole2 of mount_hole_125 { refDes="MTG2"; pin1=open; }
    inst mounting_hole3 of mount_hole_125 { refDes="MTG3"; pin1=open; }
    inst mounting_hole4 of mount_hole_125 { refDes="MTG4"; pin1=open; }

    // Let's put some test points so we can measure power plane decoupling.
    inst tp1 of TP_ROUND  { refDes="TP1"; sig=gnd; }
    inst tp2 of TP_ROUND  { refDes="TP2"; sig=gnd; }
    inst tp3 of TP_SQUARE { refDes="TP3"; sig=+3V3; }
    inst tp4 of TP_SQUARE { refDes="TP4"; sig=+3V3; }
    inst tp5 of TP_ROUND  { refDes="TP5"; sig=gnd; }
    inst tp6 of TP_ROUND  { refDes="TP6"; sig=gnd; }
    inst tp7 of TP_SQUARE { refDes="TP7"; sig=+1V8; }
    inst tp8 of TP_SQUARE { refDes="TP8"; sig=+1V8; }
    // and trace impedance.
    inst tp9  of TP_ROUND  { refDes="TP9";  sig=gnd; }
    inst tp10 of TP_ROUND  { refDes="TP10"; sig=gnd; }
    inst tp11 of TP_SQUARE { refDes="TP11"; sig=test_trace_bottom; }
    inst tp12 of TP_SQUARE { refDes="TP12"; sig=test_trace_bottom; }
    inst tp13 of TP_ROUND  { refDes="TP13";  sig=gnd; }
    inst tp14 of TP_ROUND  { refDes="TP14"; sig=gnd; }
    inst tp15 of TP_SQUARE { refDes="TP15"; sig=test_trace_top; }
    inst tp16 of TP_SQUARE { refDes="TP16"; sig=test_trace_top; }

}

