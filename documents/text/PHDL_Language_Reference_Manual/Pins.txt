Pins
====

Description
-----------

A pin is the part of a device that corresponds to an actual pad in layout.

To the user of a device, a pin on a device is just like a port on a design.
A pin has both a logical name and a physical name.
The logical name is used when hooking things up in a design.
The physical name is primarily provided for use by backends.
Generally the physical name must be the name of the corresponding pad in the footprint definition of the device in our layout program.

In all cases, there must be one physical name assigned to each bit of each logical pin.
Pins can be defined as arrays and multiple pins can be defined or assigned in a single statement.
In some cases, this can save a lot of typing and/or unnecessary redundancy, but care should be taken here to avoid creating a hard-to-understand pin definition.

Pins can have an assocated block where attributes can be set.
Device-scope and package- scope pin attributes are automatically in scope in these blocks.

Syntax
------

--------------------
Pin_Statement             ⇒ (Pin_Declaration | Pin_Assignment | Pin_Attribute_Declaration | Pin_Attribute_Access) ";"
Pin_Declaration           ⇒ "pin" Pin_Assignment
Pin_Assignment            ⇒ Pin_Logical_Names (Pin_Attribute_Block | Pin_Physical_Names)
Pin_Attribute_Declaration ⇒ "pin" Attribute_Declaration ";"
Pin_Logical_Names         ⇒ Pin_Slice ("," Pin_Slice)*
Pin_Physical_Names        ⇒ "=" Pin_Name ("," Pin_Name)*
Pin_Attribute_Block       ⇒ "{" Attribute_Statement* "}" Pin_Physical_Names?
Pin_Attribute_Assignment  ⇒ Pin_Attribute_Keys Attribute_Values
Pin_Attribute_Keys        ⇒ Pin_Attribute_Key ("," Pin_Attribute_Key)
Pin_Attribute_Key         ⇒ Pin_Slice "." Attribute_Key
Pin_Slice                 ⇒ Pin_Name Slice
Pin_Name                  ⇒ Name | Parameter
--------------------

Examples
--------

Often the logical name will be the name from the datasheet, and the physical name will be the pin number.
However, we might use a different name when it helps make our design be more descriptive or easier to work with.
For example, a diodes's footprint in our layout tool might expect pins `1` and `2`, and the datasheet calls them `A` and `C`, but we'll call them `"+"` and `"-"` because that makes our design more uniform.

[source,phdl]
--------------------
device diode {
	pin "+" = 1;
	pin "-" = 2;
};
--------------------

We might want to do the same sort of thing with a power jack, so that we are less likely to make a mistake in our design.
This time we are even more verbose.

[source,phdl]
--------------------
device power_jack {
	pin center_post  = 1;
	pin side_contact = 2;
	pin plug_detect  = 3;
};
--------------------

Here is another example.
An FPGA's physical pin name may be called `G17`, which corresponds to something like `IO102_P25_GCLK3` in the datasheet.
But we decide to use the much more descriptive name `FPGA_clock_in` from our FPGA code when creating our design.
This scheme is particular useful for tools that convert FPGA implementation pin report files into PHDL device descriptions.

[source,phdl]
--------------------
device FPGA {
	pin FPGA_clock_in = G17; // IO102_P25_GCLK3
};
--------------------

Although we'll usually just keep pin definitions simple on-liners, there is no requirement to do so.
We can first declare our pins, then assign them in separate statements inside the same device block.
For example, this could be very useful if the pin description for a regulator in a BGA package is given in the datasheet as a picture of the footprint, rather than a list of what signals are on what pins.
In our first version, the pins are listed in some logical order, but they are very hard to check against a datasheet that only shows pinout via a footprint picture.

[source,phdl]
--------------------
device regulator_hard_to_verify_against_datasheet {
	pin[1:3] IN = A4,B3,C1;
	pin[1:2] OUT = D2,D4;
	pin      ADJ_SENSE = A2;
	pin      SHDN_N = A3;
	pin[1:2] PGND = B4,D3;
	pin[1:2] AGND = B1,D1;
	pin[1:5] NC = A1,B2,C2,C3,C4;
	pin      GND_PAD = EPAD;
};
--------------------

Here is another, equivalent, way of writing the same regulator above.
This time we've lined up things up to match the pictoral BGA table in the datasheet.
Which way we choose is mostly a matter of opinion and how good the datasheets of the parts we use are!

[source,phdl]
--------------------
device regulator_easy_to_verify_against_datasheet {
	pin[1:3] IN;
	pin[1:2] OUT, PGND, AGND;
	pin      ADJ_SENSE, SHDN_N:
	pin[1:5] NC;

	   NC[1] =A1; AGND[1]=B1; IN[3]=C1; AGND[2]=D1;
	ADJ_SENSE=A2;  NC [2]=B2; NC[3]=C2;  OUT[1]=D2;
	 SHDN_N  =A3;  IN [2]=B3; NC[4]=C3; PGND[2]=D3;
	   IN[1] =A4; PGND[1]=B4; NC[5]=C4;  OUT[2]=D4;

	pin      GND_PAD = EPAD;
};
--------------------

Another reason we might want to defer our pin assignments until after the declaration is when it makes things easier to read and understand.
In the following example, there are two 8-bit data buses, but they way they hook up on the chip is easier to see when we split pin definition into several statements.
Before splitting into multiple statements it looks like the example below.
The two pin arrays are flattened and assigned to pins in normal slice order.
Obviously, we probably want to avoid writing confusing statements like this in real designs.

[source,phdl]
--------------------
device hard_to_read_data_ports {
	pin[7:0] data_in, data_out = 1,2,3,4,5,6,7,8,13,14,15,16,12,11,10,9;
}
--------------------

After splitting the above example into multiple statements, it is much easier to understand.
Specifically, it is a lot easier see which pins go to which bus, and which part of `data_out` has a reversed pin ordering from the rest.

[source,phdl]
--------------------
device easy_to_read_data_ports {
	pin[7:0] data_in, data_out;
	data_in = 1,2,3,4,5,6,7,8;
	data_out[0:3], data_out[7:4] = 9,10,11,12,13,14,15,16;
}
--------------------

In some situations, it's less confusing to just write the whole thing out, one statement per pin.
In this example it's probably unnecessary, but in many occasions, this extra verbosity helps more than it hurts.
Perhaps in this situation, we did this because it made it easier to verify aginst a table from a datasheet.
(Or more likely, we generated this by doing a quick "cut, paste, reformat" from that datasheet table!)

[source,phdl]
--------------------
device verbose_data_ports {
	pin[7:0] data_in, data_out;
	data_in[0]  =  1;
	data_in[1]  =  2;
	data_in[2]  =  3;
	data_in[3]  =  4;
	data_in[4]  =  5;
	data_in[5]  =  6;
	data_in[6]  =  7;
	data_in[7]  =  8;
	data_out[0] =  9;
	data_out[1] = 10;
	data_out[2] = 11;
	data_out[3] = 12;
	data_out[7] = 13;
	data_out[6] = 14;
	data_out[5] = 15;
	data_out[4] = 16;
}
--------------------

Attributes can be set on pins when they are declared, or can be set after the fact.
For example, if we were using the `@max_current` attribute to track maximum current on pins and nets in our design, and needed to annotate a connector with special per-pin current requirements, we might do do as follows:

[source,phdl]
--------------------
device variable_current_connector {
	pin[1:2] GND { attribute @max_current = "45 A"; } = GND1, GND2;
	pin[1:15] p = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15;
	p[1,7,15] { attribute @max_current = "15 A"; };
	p[2:6,8:13] { attribute @max_current = "2 A"; };
	p[14] { attribute @max_current = "8 A"; };
};
--------------------

With the same example above, we might instead take advantage of device-scope pin attributes to set a default for `@max_current` and get rid of the requirement to redefine the attribute for every set of pins.
Here we only have change the attribute when there is an exception.
We'll also split things into multiple statements to make logically separate attributes from pin assignments.

[source,phdl]
--------------------
device variable_current_connector {
	pin[1:2] GND = GND1, GND2;
	pin[1:15] p = 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15;

	pin attribute  @max_current =  "2 A";
	GND          { @max_current = "45 A"; };
	p[1,7,15]    { @max_current = "15 A"; };
	p[1,7,15]    { @max_current = "15 A"; };
	p[14]        { @max_current = "8 A";  };
};
--------------------

If we instead of the above, we had a different attribute value to set on each pin, we might write this out a little differently.
While addressing combined attributes in this manner is useful in certain situations, it does need to be used sparingly to avoid making things unreadable.
Here we line up our attributes with our pins, and it looks pretty nice.

[source,phdl]
--------------------
device crazy_connector {
	pin attribute @max_current;
	pin[1:8] p     =     1,    2,    3,    4,    5,    6,    7,    8;
	p.@max_current = "4 A","3 A","2 A","8 A","7 A","2 A","5 A","9 A";
}
--------------------


