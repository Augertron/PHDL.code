Names & Values
==============

Description
-----------

A name in PHDL is, unsuprisingly, just the logical name we give something.
_Names_ are the identifiers we use to construct our designs and connect things together.
Essentially, names are just strings.
Names can be quoted, but don't usually need to be.
_Values_ are just names used as uninterpreted literals.

Just about everything has a name.
Some things also have values.
Designs, devices and instances have names.
Nets, ports and pins have names.
Attributes & parameters have both names and values.
Every device or pin has both a logical name and physical name.
The physical names of devices and pins are effectively values, since they are not used as logical identifiers.

Mostly names work as you'd expect, so there are very few surprises.
For example, names like `abcd`, `regulator`, `Bridge_Chip`, `data3`, and `_internal` should hold no surprises.
Names can start with digits.
For example, there is no problem having names like `1234`, `8_bit`, or `2DIR`.

In addition, our full Unicode support allows us to give more descriptive names such as `"IÂ²C_SDA"`.
And of course, Unicode identifiers, such as `empÃªche`, `Î»Î±Î¼Î²Î¬Î½Ï‰`, `à¸„à¸‡à¸—à¸µà¹ˆ`, `Ð¾ÑˆÐ¸Ð±ÐºÐ°`, `Ù‚Ø·Ø¨Ø³Ø§Ù„Ø¨`, `ç›¸å¯¾å£²è²·`, and `"ðŸ˜ƒâ†’ðŸ˜¨"` work fine as well.
(Backends which transcode to legacy encodings always must do so in a standard, round-trip-reversable way footnote:[Examples of such methods include Base64, Quoted-Printable, UTF-7, UTF-EBCDIC, and so forth.].)

[source,phdl]
--------------------
// These names do not need quotes.
net abcd, 1234, empÃªche, Î»Î±Î¼Î²Î¬Î½Ï‰, à¸„à¸‡à¸—à¸µà¹ˆ, Ð¾ÑˆÐ¸Ð±ÐºÐ°, ç›¸å¯¾å£²è²·;

// These names require quotes.
net "IÂ²C_SDA", "ðŸ˜ƒâ†’ðŸ˜¨", "+3.3 V", "OE/";
--------------------

If we want to use names with normally disallowed characters, we have to use quotes.
For example in the above examples, `"IÂ²C_SDA"` was quoted because it contains the `Â²` character, and `"Ù‚Ø·Ø¨ Ø³Ø§Ù„Ø¨"` was quoted because it contains a space.
The same applies to names like `"+3.3 V"`, `"-"`, `"OE/"`, `"D*"`, `"4.7 kÎ©"`, and so forth.
For convenience, we're likely to use mostly non-quoted names, reserving quoted names only for when it adds clarity to our design.

[source,phdl]
--------------------
// The resistance units are explicitly stated.
// The intended use of the pins is unambiguous.
device easier_to_use_resistor of 0604 {
	attribute @resistance = "4.7 kÎ©";
	pin "+" = 1;
	pin "-" = 2;
};

// The resistance units have to be inferred.
// The intended use of the pins is clear, but verbose.
device harder_to_use_resistor of 0604 {
	attribute @resistance = 4700;
	pin positive = 1;
	pin negative = 2;
};
--------------------

Quotes are optional when not required.
Regardless of whether names are simple or quoted, the resulting `Name` is semantically the same.
Thus, the assignment statements below are all exactly equivalent:

[source,phdl]
--------------------
1234 = abcd;
1234 = "abcd";
"1234" = abcd;
"1234" = "abcd";
--------------------

Semantics
---------

General semantics of names as used in the language is as follows.
The names referred to are as defined in the syntax section.

Names::
Most places where names can be used, they can be used in a list.
However, whether multiple names are allowed or how many names are expected is often context sensitive.
Exactly what is allowed in the context of any particular construct is described along with the construct itself.
For example, a 3 bit net could be assigned a list of 1, 2, or 3 nets; which is valid depends on widths.

Name_Expanded::
Expanded names are only semantically correct in certain contexts.
These contexts are described along with the individual constructs where they are valid.
For example, an expanded name is invalid in a package name declaration.

Name_Qualified::
Qualified names are not universally valid.
Where they can be used again depends on context, and will be described along with the constructs which allow them.
For example, trying to define a port with a qualified name is non-sensical.

Name_Sliced::
Slices on names are only valid in certain contexts.
Even when allowed, the semantics of the slice ranges may determine whether a construct is valid or not.
Where slices can be used is described allow with the constructs that allow them.
For example, a device declaration with a slice isn't allowed.

Name_Prefix::
The prefix of names determines if they are normal names, attributes, or parameters.
Different types of names are allowed in different contexts.
Each construct which requires names will define which types of names are valid in that context.
For example, attributes can only be used in attribute declarations and assignments.

Name_Escaped_Codepoint::
The codepoint given in an escaped codepoint can be any codepoint, assigned or not, between U+0 and U+10FFFF.
An normalization pass is run on the identifier after these codepoints are expanded.
This means that any attempt to put in an invalid codepoint (such as a surrogate) will result in getting a standard U+FFFD replacement character instead.
