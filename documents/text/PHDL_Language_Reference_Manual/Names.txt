Names & Values
==============

Description
-----------

A name in PHDL is, unsuprisingly, just the logical name we give something.
_Names_ are the identifiers we use to construct our designs and connect things together.
Essentially, names are just strings.
Names can be quoted, but don't usually need to be.
_Values_ are just names used as uninterpreted literals.

Just about everything has a name.
Some things also have values.
Designs, devices and instances have names.
Nets, ports and pins have names.
Attributes & parameters have both names and values.
Every device or pin has both a logical name and physical name.
The physical names of devices and pins are effectively values, since they are not used as logical identifiers.

Mostly names work as you'd expect, so there are very few surprises.
For example, names like `abcd`, `regulator`, `Bridge_Chip`, `data3`, and `_internal` should hold no surprises.
Names can start with digits.
For example, there is no problem having names like `1234`, `8_bit`, or `2DIR`.

In addition, our full Unicode support allows us to give more descriptive names such as `"IÂ²C_SDA"`.
And of course, non-ASCII identifiers, such as `empÃªche`, `Î»Î±Î¼Î²Î¬Î½Ï‰`, `à¸„à¸‡à¸—à¸µà¹ˆ`, `Ð¾ÑˆÐ¸Ð±ÐºÐ°`, `"Ù‚Ø·Ø¨ Ø³Ø§Ù„Ø¨"`, `ç›¸å¯¾å£²è²·`, and `"ðŸ˜ƒâ†’ðŸ˜¨"` work fine as well.
(Backends which transcode to legacy encodings always must do so in a standard, round-trip-reversable way footnote:[Examples of such methods include Base64, Quoted-Printable, UTF-7, UTF-EBCDIC, and so forth.].)

[source,phdl]
--------------------
// These names do not need quotes.
net abcd, 1234, empÃªche, Î»Î±Î¼Î²Î¬Î½Ï‰, à¸„à¸‡à¸—à¸µà¹ˆ, Ð¾ÑˆÐ¸Ð±ÐºÐ°, ç›¸å¯¾å£²è²·;

// These names require quotes.
net "IÂ²C_SDA", "ðŸ˜ƒâ†’ðŸ˜¨", "+3.3 V", "OE/";
--------------------

If we want to use names with normally disallowed characters, we have to use quotes.
For example in the above examples, `"IÂ²C_SDA"` was quoted because it contains the `Â²` character, and `"Ù‚Ø·Ø¨ Ø³Ø§Ù„Ø¨"` was quoted because it contains a space.
The same applies to names like `"+3.3 V"`, `"-"`, `"OE/"`, `"D*"`, `"4.7 kÎ©"`, and so forth.
For convenience, we're likely to use mostly non-quoted names, reserving quoted names only for when it adds clarity to our design.

[source,phdl]
--------------------
// The resistance units are explicitly stated.
// The intended use of the pins is unambiguous.
device easier_to_use_resistor of 0604 {
	attribute @resistance = "4.7 kÎ©";
	pin "+" = 1;
	pin "-" = 2;
};

// The resistance units have to be inferred.
// The intended use of the pins is clear, but verbose.
device harder_to_use_resistor of 0604 {
	attribute @resistance = 4700;
	pin positive = 1;
	pin negative = 2;
};
--------------------

Quotes are optional when not required. These assignment statements below are all equivalent:

[source,phdl]
--------------------
1234 = abcd;
1234 = "abcd";
"1234" = abcd;
"1234" = "abcd";
--------------------

Syntax
------

All names and values follow the rule for `Name` as given below.

[source,syntax]
--------------------
Name                   â‡’ Name_Simple | Name_Quoted
Name_Simple            â‡’ _Name_Simple_Codepoint_Start _Name_Simple_Codepoint_Continue*
Name_Quoted            â‡’ "\"" (_Name_Quoted_Codepoint | Name_Quoted_Escape)* "\""
Name_Quoted_Escape     â‡’ (Name_Escaped_Backslash | Name_Escaped_Quote | Name_Escaped_Codepoint)
Name_Escaped_Backslash â‡’ "\\\\"
Name_Escaped_Quote     â‡’ "\\\""
Name_Escaped_Codepoint â‡’ "\\x{" _Name_Escaped_Codepoint_Hex_Value "}"
--------------------

_Name_Simple_Codepoint::
A Unicode codepoint with either the `ID_Start` property, or a general category of either `Nd` or `Pc`.

_Name_Simple_Codepoint::
A Unicode codepoint with the `ID_Continue` property.

_Name_Quoted_Codepoint::
Any Unicode valid codepoint except for `"` (`U+22 QUOTATION MARK`) or `\` (`U+5C REVERSE SOLIDUS`).

_Name_Escaped_Codepoint_Hex_Value::
An sequence of Unicode codepoints each with the `ASCII_Hex_Digit` property.
When interpreted as a hexadecimal number written most-significant-digit-first, the resulting value must indicate a valid Unicode codepoint.

After parsing, `Name` nodes simply contain a single string with the corresponding name.
Regardless of whether names are simple or quoted, the resulting `Name` is semantically the same.

Name::
* `name` : string
