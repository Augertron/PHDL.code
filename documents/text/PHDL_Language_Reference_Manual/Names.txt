Names & Values
==============

A name in PHDL is, unsuprisingly, just the logical name we give something.
_Names_ are the identifiers used as we construct our design and connect things together.
Essentially, names are just strings.
Names can be quoted, but don't usually need to be.
_Values_ are just names used as uninterpreted literals.

Just about everything has a name.
Some things also have values.
Designs and instances have names.
Every device or pin has both a logical name and physical name.
Instances have names.
Nets, ports and pins have names.
Attributes & parameters have both names and values.
The physical names of devices and pins are effectively values, since they are not used as logical identifiers.

Mostly names work as you'd expect, so there are very few surprises.
For example, names like `abcd`, `regulator`, `Bridge_Chip`, `data3`, and `_internal` should hold no surprises.
Names can start with digits.
For example, there is no problem having names like `1234`, `8_bit`, or `2DIR`.

In addition, our full Unicode support allows us to give more descriptive names such as `"IÂ²C_SDA"`.
And of course, non-ASCII identifiers, such as `empÃªche`, `Î»Î±Î¼Î²Î¬Î½Ï‰`, `à¸„à¸‡à¸—à¸µà¹ˆ`, `Ð¾ÑˆÐ¸Ð±ÐºÐ°`, `"Ù‚Ø·Ø¨ Ø³Ø§Ù„Ø¨"`, `ç›¸å¯¾å£²è²·`, and `"ðŸ˜ƒâ†’ðŸ˜¨"` work fine as well.
(Backends which transcode to legacy encodings always must do so in a standard, round-trip-reversable way footnote:[Examples of such methods include Base64, Quoted-Printable, UTF-7, UTF-EBCDIC, and so forth.].)

If we want to use names with characters disallowed by `_Name_Simple_Literal`, we have to use quotes.
For example in the above examples, `"IÂ²C_SDA"` was quoted because it contains the `Â²` character, and `"Ù‚Ø·Ø¨ Ø³Ø§Ù„Ø¨"` was quoted because it contains a space.
The same applies to names like `"+3.3 V"`, `"-"`, `"OE/"`, `"D*"`, `"4.7 kÎ©"`, and so forth.
For convenience, we're likely to use mostly non-quoted names, reserving quoted names only for when it adds clarity to our design.

Below is an example of how some of these names mentioned above look in PHDL code.

[source,phdl]
--------------------
// These names don't need to be quoted.
net empÃªche, Î»Î±Î¼Î²Î¬Î½Ï‰, à¸„à¸‡à¸—à¸µà¹ˆ, Ð¾ÑˆÐ¸Ð±ÐºÐ°, ç›¸å¯¾å£²è²·;

// These names must be quoted.
net "IÂ²C_SDA", "ðŸ˜ƒâ†’ðŸ˜¨", "+3.3 V", "-", "OE/";

// These statements are all equivalent.
1234 = abcd;
1234 = "abcd";
"1234" = abcd;
"1234" = "abcd";
--------------------

Syntax
------

[source,syntax]
--------------------
Name                   â‡’ Name_Simple | Name_Quoted
Name_Simple            â‡’ _Name_Simple_Literal_Start _Name_Simple_Literal*
Name_Quoted            â‡’ "\"" (_Name_Quoted_Literal | Name_Quoted_Escape)* "\""
Name_Quoted_Escape     â‡’ (Name_Escaped_Backslash | Name_Escaped_Quote | Name_Escaped_Codepoint)
Name_Escaped_Backslash â‡’ "\\\\"
Name_Escaped_Quote     â‡’ "\\\""
Name_Escaped_Codepoint â‡’ "\\x{" _Name_Escaped_Codepoint_Hex_Value "}"
--------------------

_Name_Simple_Literal_Start::
A Unicode codepoint with either the `ID_Start` property, or a general category of either `Nd` or `Pc`.

_Name_Simple_Literal::
A Unicode codepoint with the `ID_Continue` property.

_Name_Quoted_Literal::
Any Unicode valid codepoint except for `"` (U+22, QUOTATION MARK) or `\` (U+5C, REVERSE SOLIDUS).

_Name_Escaped_Codepoint_Hex_Value::
An sequence of Unicode codepoints each with the `ASCII_Hex_Digit` property.
When interpreted as a hexadecimal number written most-significant-digit-first, the resulting value must indicate a valid Unicode codepoint.

Examples
--------

